{"version":3,"sources":["MovieItem.js","App.js","serviceWorker.js","index.js"],"names":["MovieItem","_this$props","this","props","item","onClick","react_default","a","createElement","className","src","Backdrop","alt","MovieName","height","width","style","margin","MovieID","KnownAs","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","requestMoviesList","asyncToGenerator","regenerator_default","mark","_callee","url","wrap","_context","prev","next","setState","isLoading","console","log","fetch","then","res","json","data","Title","isError","results","catch","error","stop","getPlayUrl","_callee2","_context2","concat","currentItem","playUrl","playList","modal","state","searchText","toggle","bind","assertThisInitialized","prevState","_this2","href","target","rel","keys","map","key","MovieItem_MovieItem","onClickItem","Modal","isOpen","ReactPlayer_default","playing","controls","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84f465d6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './MovieItem.css';\n\nexport default class MovieItem extends Component{\n\n    render(){\n        const {item, onClick} = this.props\n        return(\n            <div onClick={onClick} className=\"MovieItem\"> \n                <img src={item.Backdrop} className=\"thumb\" alt={item.MovieName} height=\"106\" width=\"189\" style={{margin:10}}/>\n                <div style={{}}>\n                    <p>ID: {item.MovieID}</p>\n                    <p>{item.KnownAs}</p>\n                    <p>[English] {item.MovieName}</p>\n                </div>\n                \n            </div>\n        )\n    }\n\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport MovieItem from './MovieItem'\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport ReactPlayer from 'react-player'\n\nexport default class App extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n\n      isLoading: false,\n      isError: '',\n      results: [],\n      searchText: '',\n      modal: false,\n    };\n\n    this.toggle = this.toggle.bind(this);\n    this.currentItem = null;\n    this.playUrl = ''\n\n  }\n\n  componentDidMount(){\n    this.requestMoviesList()\n  }\n\n  requestMoviesList = async () => {\n\n    this.setState({ isLoading: true });\n\n    const url = `http://movies.hdviet.com/tim-kiem-nhanh.html?keyword=hay`\n    \n    console.log(url)\n\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        console.log('res:', data.Title);\n\n        this.setState({\n            isLoading: false,\n            isError: '',\n            results: data.Title\n        });\n\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({\n              isLoading: false,\n              isError: error\n            });\n      });\n  };\n\n  getPlayUrl = async () => {\n\n\n    const url = `http://movies.hdviet.com/get_movie_play_json?movieid=${this.currentItem.MovieID}&sequence=1`\n    \n    console.log(url)\n\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        console.log('res:', data);\n        this.playUrl = data.data.playList\n        this.setState({\n          modal:true\n        });\n\n      })\n      .catch(error => {\n        console.log(error);\n        this.setState({\n              isLoading: false,\n              isError: error\n            });\n      });\n  };\n\n\n  onClickItem(item){\n    console.log(item.MovieID)\n    this.currentItem = item\n    this.getPlayUrl()\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n\n  render() {\n    \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          \n            save to reload.\n          \n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n\n        <div className=\"App-body\">\n            {\n              Object.keys(this.state.results).map(key => \n                <MovieItem key={key} item={this.state.results[key]} onClick={()=> this.onClickItem(this.state.results[key])}/>\n              )\n            }\n          </div>\n          {this.currentItem &&\n            \n\n          <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n            \n            <ReactPlayer url={this.playUrl} playing controls/>\n          \n          </Modal>\n          \n          }\n\n\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}